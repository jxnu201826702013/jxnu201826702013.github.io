<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb应用部署到服务器</title>
      <link href="/posts/2691.html"/>
      <url>/posts/2691.html</url>
      
        <content type="html"><![CDATA[<p>这几天也是写了个Java的大作业，基于<code>servle</code>和<code>jsp</code>对学生，教师等一系列的增删改查，中途也踩了很多坑，最后本地运行没问题，但是想让别的小伙伴也可看到，正好手里头有空闲的服务器，于是就有了这篇文章，做个记录。</p><ol><li><p>服务器上下载<code>tomcat</code></p><p>这里我用的是<code>9.x</code>版本的<code>tomcat</code>，进<code>/opt</code>目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下载好的<code>tomcat</code>压缩包解压：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvzf apache-tomcat-9.0.36.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>tomcat配置就ok了</p></li><li><p>Java环境</p></li><li><p>mysql环境</p></li><li><p>javaweb程序打<code>war</code>包</p></li><li><p>启动<code>tomcat</code></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装oraclejdk</title>
      <link href="/posts/6977.html"/>
      <url>/posts/6977.html</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu1810服务器安装OracleJdk"><a href="#ubuntu1810服务器安装OracleJdk" class="headerlink" title="ubuntu1810服务器安装OracleJdk"></a>ubuntu1810服务器安装OracleJdk</h2><ol><li><p>进入<code>opt</code>目录<code>cd opt/</code>，下载jdk</p><pre class="line-numbers language-shell"><code class="language-shell">wget https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>解压压缩包</p><pre class="line-numbers language-shell"><code class="language-shell">tar -xvzf jdk-8u202-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除压缩包</p><pre class="line-numbers language-shell"><code class="language-shell">rm  -rf jdk-8u202-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置环境变量</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件末尾追加以下内容：</p><pre class="line-numbers language-shell"><code class="language-shell">export JAVA_HOME=/usr/java/jdk1.8.0_102export JRE_HOME=/usr/java/jdk1.8.0_102/jreexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新配置信息</p><pre class="line-numbers language-shell"><code class="language-shell">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试jdk是否安装成功</p><pre class="line-numbers language-shell"><code class="language-shell">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">java version "1.8.0_202"                                                    Java(TM) SE Runtime Environment (build 1.8.0_202-b08)                       Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>到此，Ubuntu安装OracleJdk就成功了。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+Github搭建图床</title>
      <link href="/posts/d03f.html"/>
      <url>/posts/d03f.html</url>
      
        <content type="html"><![CDATA[<p>背景：</p><p>​    写文章时，如果需要插入很多图片，这个时候比较麻烦，无意之中发现了PicGo这个开源软件，极大的简化了我们的很多操作。并且支持很多类型的图床。如 SM.MS图床，腾讯云图床，微博图床，Github图床，七牛云图床，Imgur图床，阿里云图床，又拍云图床。</p><p>如你所见，你在这篇文章里看到的所有图片都是PicGo+GitHub来的。（当然，不止这里的文章</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200423101324.png" alt=""></p><p>开始 ：</p><ol><li><p>创建图床仓库，当然，仓库名字和描述你可以自定义写。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200423101755.png" alt=""></p></li></ol><ol start="2"><li><p>生成Access Token</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200423102226.png" alt=""></p></li></ol><p>   如图，为这个token起个名字，勾选相关的权限。</p><p>   <img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200423102938.png" alt=""></p><p>   <img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200423103656.png" alt=""></p><p>   复制这个刚刚生成的tokan。</p><ol start="3"><li><p>配置PicGo</p><p>下载地址：<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/picgo/releases</a></p><p>下载完成后安装，来到这个界面，当然，我是已经配置好了的。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200423103234.png" alt=""></p><p>仓库名为你的GitHub用户名+你的图床仓库名，中间有个斜杠。</p><p>分支名为默认的  master  即可。</p><p>填入上面复制的tokan。</p><p>储存路径和自定义域名根据你的需要选择。</p></li></ol><p>到这里，你的图床已经搭建好了。</p><p>   <img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200423104139.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识jdbc</title>
      <link href="/posts/6604.html"/>
      <url>/posts/6604.html</url>
      
        <content type="html"><![CDATA[<p>JDBC（Java DataBase Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。</p><p>简单地说，JDBC 做三件事：与数据库建立连接、发送 操作数据库的指令并处理结果。</p><p><b>连接JDBC的步骤</b></p><ul><li>加载驱动程序</li><li>创建连接</li><li>执行SQL语句</li><li>关闭连接</li></ul><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>安装完成<code>mysql</code>后可以<code>cmd</code>中<code>mysql -u root -p</code>指定root账户登录<code>mysql</code>数据库。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200314155316.png" alt=""></p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200314161421.png" alt=""></p><p>到<code>mysql</code>的官网下载<code>mysql</code>的<a href="https://dev.mysql.com/downloads/connector/j/" target="_blank" rel="noopener">JDBC</a>驱动程序。下载完成后得到一个压缩包，将压缩包解压，得到一个下面的目录。其中，我们所需的就是<code>mysql-connection-java-8.0.18.jar</code>包。下载完在<code>src</code>目录下创建一个<code>lib</code>包。将这个包放进lib包中。（下载位置随意</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200314155703.png" alt=""></p><h2 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h2><p>如图，我有个数据库<code>dbname</code>，库里有个表<code>stu</code>，表如图：</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200314163528.png" alt=""></p><p>在idea打开的项目中左上角选择<code>File-&gt;Project Structure-&gt;Project Settings-&gt;Modules</code>, 然后选择其中的<code>Dependencies</code>选项卡，然后点击右上角绿色的”+”号，选择<code>JARs or directories</code>, 选中你刚刚放到lib目录中的<code>mysql-connector-java-8.0.18.jar</code>，然后点击”OK”。首先将前面解压的<code>mysql-connection-java-8.0.18.jar</code>包复制，然后</p><p>如图：点击右边的<code>+</code>，选择<code>JARs or directories</code>，会弹出一个框，选择你上面解压后的<code>mysql-connection-java-8.0.18.jar</code>包，</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200315135207.png" alt=""></p><p>上一步执行过后，可以在你的项目下面<code>External Libraries</code>里面看到<code>mysql-connection-java-8.0.18.jar</code>,此时所需<code>jar</code>包已经准备好了。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200315140646.png" alt=""></p><p>操作数据库。无非就是增删改查（CURD)，下面具体看看怎么操作：</p><p>先写一个工具类，这个工具类有两个方法，（一个用来获取数据库的连接，也就是connection，另一个自然是关闭这个连接）</p><p>不妨叫这个工具类<code>MyDBUtils.java</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDBUtils</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置连接地址</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/dbname?serverTimezone=UTC&amp;characterEncoding=utf-8"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//mysql用户名</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//mysql密码</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String passwd <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回一个connection对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//加载mysql驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//获取连接</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回连接对象</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Connection connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的<code>MyDBUtils</code>里面的属性和方法都写成了静态，方便我们下面调用。</p><p>好了，工具类写好了，看下具体怎么增删改查吧。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CURD</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取连接对象</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//要执行的sql语句</span>        String sql <span class="token operator">=</span> <span class="token string">"update stu set name  = '小红'  where name = '小明' "</span><span class="token punctuation">;</span>        PreparedStatement pt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回值a表示受影响的行数，如果a > 0，表示插入成功</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里为了简化，查询user表里所有的内容</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user;"</span><span class="token punctuation">;</span>        PreparedStatement pt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> pt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果ResultSet中有数据</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查询成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//此表有三个字段</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查询失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> ClassNotFoundException    <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"delete  from user where id=?"</span><span class="token punctuation">;</span>        PreparedStatement pt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果删除成功，受影响行数为1</span>        <span class="token keyword">int</span> success <span class="token operator">=</span> pt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>success <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除成功\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"删除失败\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> String username<span class="token punctuation">,</span>String passwd<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> ClassNotFoundException    <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into user values (?,?,?)"</span><span class="token punctuation">;</span>        PreparedStatement pt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>  success <span class="token operator">=</span> pt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>success <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入成功\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入失败\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>mysql</code>8.0版本不加<code>serverTimezone=UTC&amp;characterEncoding=utf-8</code>这一段会抛出异常，报错说是因为时区原因。还有<code>com.mysql.jdbc.Driver</code>要写成<code>com.mysql.cj.jdbc.Driver</code>。</p><p>在查询方法中，先关闭<code>ResultSet</code>，再关闭<code>PreparedStatement</code>，最后再关闭<code>Connection</code>，遵循先打开后关闭的原则。</p><p>在上面的<code>SQL</code>语句中，有些语句带了“？”，这个“？”是占位符，可以后面再设定这个问号的具是什么，可以不用写死<code>SQL</code>语句，更灵活。</p><p>在<code>jdbc</code>中，我们用<code>PreparedStatement</code>，而不用<code>Statement</code>，相比之下，<code>PreparedStatement</code>比<code>Statement</code>更优秀，现在没人用<code>Statement</code>，有以下几个原因：</p><ol><li><p><strong>一.代码的可读性和可维护性</strong></p><p>用<code>Statement</code>，sql语句中没有占位符，带来的不便就是字符串的拼接，稍不留神就容易出错，而且代码可读性很低。</p></li><li><p><strong>PreparedStatement尽最大可能提高性能</strong></p><p>PreparedStatement是预编译的,对于批量处理可以大大提高效率，</p></li><li><p><strong>最重要的一点是极大地提高了安全性</strong></p><p>体现就是防<code>SQL</code>注入，<code>Statement</code>是做不到这一点的。</p></li></ol><h2 id="Apache-DBUtils"><a href="#Apache-DBUtils" class="headerlink" title="Apache DBUtils"></a>Apache DBUtils</h2><p><code>commons-dbutils</code> 是 <code>Apache</code> 组织提供的一个开源 <code>JDBC</code>工具类库，它是对<code>JDBC</code>的简单封装，学习成本极低，并且使用<code>dbutils</code>能极大简化jdbc编码的工作量，同时也不会影响程序的性能。因此<code>dbutils</code>成为很多不喜欢<code>hibernate</code>的公司的首选。</p><p>　　<code>commons-dbutilsAPI</code>介绍：</p><ul><li><p>org.apache.commons.dbutils.QueryRunner</p></li><li><p>org.apache.commons.dbutils.ResultSetHandler</p></li><li><p>org.apache.commons.dbutils.DbUtils</p></li></ul><h2 id="Apache-DBCP"><a href="#Apache-DBCP" class="headerlink" title="Apache  DBCP"></a>Apache  DBCP</h2><h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><p>c3p0是一个数据库连接池，为什么需要数据库连接池？数据库连接的创建和关闭需要消耗很多的资源，如此往复，很不划算，所以我们需要一个连接池来管理我们的连接对象。</p><p>待更….</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github部署博客</title>
      <link href="/posts/a654.html"/>
      <url>/posts/a654.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h1><h2 id="简单开始"><a href="#简单开始" class="headerlink" title="简单开始"></a>简单开始</h2><p><b>如果你不想那么麻烦，想偷懒的话，不妨直接</b></p><p><a href="https://github.com/axh2018/hexo_blog" target="_blank" rel="noopener">https://github.com/axh2018/hexo_blog</a>  直接用这个。</p><h2 id="前提准备："><a href="#前提准备：" class="headerlink" title="前提准备："></a>前提准备：</h2><h3 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h3><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 <a href="https://baike.baidu.com/item/JavaScript/321142" target="_blank" rel="noopener">JavaScript</a> 运行环境。 Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。Node 是一个让 JavaScript 运行在<a href="https://baike.baidu.com/item/服务端/6492316" target="_blank" rel="noopener">服务端</a>的开发平台，它让 JavaScript 成为与<a href="https://baike.baidu.com/item/PHP/9337" target="_blank" rel="noopener">PHP</a>、<a href="https://baike.baidu.com/item/Python/407313" target="_blank" rel="noopener">Python</a>、<a href="https://baike.baidu.com/item/Perl/851577" target="_blank" rel="noopener">Perl</a>、<a href="https://baike.baidu.com/item/Ruby/11419" target="_blank" rel="noopener">Ruby</a> 等服务端语言平起平坐的<a href="https://baike.baidu.com/item/脚本语言/1379708" target="_blank" rel="noopener">脚本语言</a>。发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。</p><p>Node对一些特殊用例进行优化，提供替代的<a href="https://baike.baidu.com/item/API/10154" target="_blank" rel="noopener">API</a>，使得V8在非浏览器环境下运行得更好。V8引擎执行Javascript的速度非常快，性能非常好。Node是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node 使用<a href="https://baike.baidu.com/item/事件驱动/9597519" target="_blank" rel="noopener">事件驱动</a>， 非阻塞<a href="https://baike.baidu.com/item/I%2FO/84718" target="_blank" rel="noopener">I/O</a> 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</p></blockquote><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222185614.png" alt=""></p><p>如图，cmd下输入node -v有版本号即可。</p><h3 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h3><blockquote><p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git 是 [Linus Torvalds](<a href="https://baike.baidu.com/item/Linus" target="_blank" rel="noopener">https://baike.baidu.com/item/Linus</a> Torvalds/9336769) 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Torvalds 开始着手开发 Git 是为了作为一种过渡方案来替代 BitKe</p></blockquote><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222185835.png" alt=""></p><p>如图，鼠标右键能看见Git Bash Here和Git GUI Here即可。</p><h3 id="GitHub账号"><a href="#GitHub账号" class="headerlink" title="GitHub账号"></a>GitHub账号</h3><blockquote><p>GitHub是一个面向<a href="https://baike.baidu.com/item/开源/20720669" target="_blank" rel="noopener">开源</a>及私有<a href="https://baike.baidu.com/item/软件/12053" target="_blank" rel="noopener">软件</a>项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名GitHub。</p><p>GitHub于2008年4月10日正式上线，除了Git代码仓库托管及基本的 Web管理界面以外，还提供了订阅、讨论组、文本渲染、在线文件编辑器、协作图谱（报表）、代码片段分享（Gist）等功能。目前，其注册用户已经超过350万，托管版本数量也是非常之多，其中不乏知名开源项目 <a href="https://baike.baidu.com/item/Ruby/11419" target="_blank" rel="noopener">Ruby</a> on Rails、<a href="https://baike.baidu.com/item/jQuery/5385065" target="_blank" rel="noopener">jQuery</a>、<a href="https://baike.baidu.com/item/python/407313" target="_blank" rel="noopener">python</a> 等。</p></blockquote><blockquote><p>2018年6月4日，微软宣布，通过75亿美元的股票交易收购代码托管平台GitHub。</p></blockquote><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>首先创建一个放置博客的文件夹，进入文件夹，右键Git Bash Here，输入下面的指令，添加国内镜像源,加快下载插件速度</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：这条指令输入后并不会有任何输出，别以为是出错了。</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。</p><p>Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>快速、简洁且高效的博客框架,Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</p><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</p><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></blockquote><p>同样，在博客文件夹下，右键Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span>  <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以输入<code>hexo -v</code>验证是否安装成功，输出版本号即可。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222191436.png" alt=""></p><p>Hexo初始化</p><p>同样，在博客文件夹下，右键Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo init <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222192829.png" alt=""></p><p>Hexo初始化后 ，有以下几个文件/文件夹。</p><ul><li><code>scaffolds：</code>生成文章的一些模板 </li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code>主题</li><li>.<code>gitignore</code> Git忽略文件夹</li><li><code>_config.yml:</code> 博客的配置文件</li><li><code>package.json</code>  所需模块</li><li><code>node_modules:</code> 依赖包</li><li><code>package-lock.json</code> 记录了模块下载地址</li></ul><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222192929.png" alt=""></p><h3 id="安装依赖插件"><a href="#安装依赖插件" class="headerlink" title="安装依赖插件"></a>安装依赖插件</h3><p>同样，在博客文件夹下，右键Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> intall <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222193359.png" alt=""></p><h3 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate      <span class="token comment" spellcheck="true">#或者简写hexo g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时你的博客文件夹根目录下下，会生成一个<code>pubic</code>文件夹，里面存放了生成的页面。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222205522.png" alt=""></p><h3 id="本地预览效果"><a href="#本地预览效果" class="headerlink" title="本地预览效果"></a>本地预览效果</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server        <span class="token comment" spellcheck="true">#或者简写hexo s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开浏览器，输入<code>127.0.0.1:4000</code>  即可预览本地效果</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222205654.png" alt=""></p><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><h4 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h4><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222210439.png" alt=""></p><p>需要 注意的是，仓库名有要求,要创建一个和你用户名相同的仓库，后面加<code>github.io</code>，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是<a href="http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名。例如我的GitHub" target="_blank" rel="noopener">http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名。例如我的GitHub</a> id为axh2018，那么我的仓库名必须为axh2018.github.io</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222211048.png" alt=""></p><h4 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h4><p>博客文件夹根目录下，右键Git Bash Here，输入</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span>  config --global  user.name    <span class="token string">"githubid"</span>$ <span class="token function">git</span>  config --global  user.email     <span class="token string">"email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里<code>id</code>和<code>email</code>换成你自己的信息，然后生成<code>ssh</code>密钥</p><pre class="line-numbers language-bash"><code class="language-bash">$ ssh-keygen  -t rsa -C <span class="token string">"email"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215028.png" alt=""></p><p>这个时候在你的家目录下会生成一个<code>.ssh</code>文件夹，里面会有两个密钥，而你要做的，是将其中一个上传到<code>Github</code></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">cat</span>  ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215154.png" alt=""></p><p>将输入的内容复制，打开Github右上角的Settings,找到<code>SSH and GPG keys</code>，然后新建一个<code>key</code>，<code>key</code>的名字随意填一个，内容即刚复制的内容。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215350.png" alt=""></p><p>输入 <code>ssh -T git@github.com</code>,如果输出你的<code>id</code>，即验证成功。</p><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222215811.png" alt=""></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>此时，大部分工作已经做完了，接下来就是将<code>hexo g</code>生成的静态页面上传到GitHub上。</p><ul><li><p>安装deploy-git 插件</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="https://raw.githubusercontent.com/axh2018/picgo_picture/master/20200222234213.png" alt=""></p><ul><li><p>修改_config.yaml文件最后几行</p><pre class="line-numbers language-yml"><code class="language-yml">   deploy:     type: git     repository: https://github.com/axh2018/axh2018.github.io     branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>部署到GIthub</p><pre class="line-numbers language-bash"><code class="language-bash">   $ hexo clean        <span class="token comment" spellcheck="true">#删除原来生成的pubic文件夹</span>   $ hexo g            <span class="token comment" spellcheck="true">#生成新的页面</span>   $ hexo d            <span class="token comment" spellcheck="true">#部署到GitHub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>​    部署成功后可以通过  <a href="https://userid.github.io访问" target="_blank" rel="noopener">https://userid.github.io访问</a></p><h4 id="layout布局"><a href="#layout布局" class="headerlink" title="layout布局"></a>layout布局</h4><p>你新建一篇文章时：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new XXX<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它其实默认使用的是<code>post</code>这个布局，也就是在<code>source</code>文件夹下的<code>_post</code>里面。</p><p><code>Hexo</code>有三种默认布局：<code>post</code>、<code>page</code>和<code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和<code>post</code>相同，都将储存到<code>source/_posts</code>文件夹。</p><p>而new这个命令其实是：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只不过这个<code>layout</code>默认是<code>post</code>罢了。</p><p>如果你想另起一页，那么可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page newpage<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统会自动给你在<code>source</code>文件夹下创建一个<code>newpage</code>文件夹，以及<code>newpage</code>文件夹中的<code>index.md</code>，这样你访问的<code>newpage</code>对应的链接就是<a href="http://xxx.xxx/newpage" target="_blank" rel="noopener">http://xxx.xxx/newpage</a></p><p><code>draft</code>是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样会在<code>source/_draft</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到<code>post</code>中，</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo publish draft newdraft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p><h2 id="定制"><a href="#定制" class="headerlink" title="定制"></a>定制</h2><h3 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h3><p>进入博客根目录下，右键Git Bash G+Here，执行下面的指令</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> clone -b develop https://github.com/blinkfox/hexo-theme-matery themes/matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时主题文件夹下会多出一个matery主题。</p><p>然后再更改根目录下的_config.yml配置文件。找到<code>themes:</code>，将他的值改为<code>matery</code>。</p><p>此时你可以<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></p><p>本地预览<code>matery</code>主题的效果</p><p>关于<code>matery</code>主题：</p><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题</p><p>QQ 交流群1（已满）: <code>926552981</code> | QQ 交流群2（推荐）: <code>971887688</code></p></blockquote><p>特性：</p><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</li></ul><h3 id="新建分类categories"><a href="#新建分类categories" class="headerlink" title="新建分类categories"></a>新建分类categories</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---</code></pre><h3 id="新建about关于我页"><a href="#新建about关于我页" class="headerlink" title="新建about关于我页"></a>新建about关于我页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---</code></pre><h3 id="新建留言板contact页"><a href="#新建留言板contact页" class="headerlink" title="新建留言板contact页"></a>新建留言板contact页</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code>---title: contactdate: 2018-09-30 17:25:30type: "contact"layout: "contact"---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可</p></blockquote><h3 id="新建友情链接friends页"><a href="#新建友情链接friends页" class="headerlink" title="新建友情链接friends页"></a>新建友情链接friends页</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><ul><li>配置基本菜单导航的名称、路径url和图标icon.</li></ul><p>菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找</p><pre class="line-numbers language-yml"><code class="language-yml">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>二级菜单配置方法</li></ul><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p><pre class="line-numbers language-yml"><code class="language-yml">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yml"><code class="language-yml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">permalink_pinyin:  enable: true  separator: '-' # default: '-'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yml"><code class="language-yml">postInfo:  date: true  update: false  wordCount: true # 设置文章字数统计为 true.  totalCount: true # 设置站点文章总字数统计为 true.  min2read: true # 阅读时长.  readCount: true # 阅读次数.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持"><a href="#添加emoji表情支持" class="headerlink" title="添加emoji表情支持"></a>添加emoji表情支持</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能"><a href="#添加-DaoVoice-在线聊天功能" class="headerlink" title="添加 DaoVoice 在线聊天功能"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能"><a href="#添加-Tidio-在线聊天功能" class="headerlink" title="添加 Tidio 在线聊天功能"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>主题 <code>config.yml</code> 配置文件中激活 <code>verifyPassword.enable: true</code> </p><p>在你所需要加密的文章中的 <code>Front-Matter</code> 中添加 <code>password</code> 属性，<code>password</code>的值为你的原密码经过 SHA256 加密后的值。访问文章就需要输入密码了，输入的为原密码。</p><h3 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class="line-numbers language-yml"><code class="language-yml">music:  enable: true  title: 听听音乐 #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require    music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require    song id / playlist id / album id / search keyword  fixed: false       # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>server</code>可选网<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法：网页打开例如网易云音乐，点击一个推荐的歌单，地址栏会有一个<code>id</code>，<code>id</code>即为这串数字。其中search的id为搜索的关键字。</p></blockquote><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: typora-vue-theme主题介绍<span class="token title important">date: 2018-09-07 09:25:00<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  <span class="token list punctuation">-</span> Typora  - <span class="token title important">Markdown<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>主题会有一层变换的颜色笼罩在背景图上，在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*如果不需要，可以将上面三个注释掉*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不需要的话，直接将上面三个注释掉即可。</p><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 `` 代码中：</p><pre class="line-numbers language-html"><code class="language-html">$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如想每小时切换,将<code>getDay()</code>改为<code>getHours()</code>即可,但是需要增加图片的数量为24，且在_config.yml中做修改相应。</p><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h3 id="添加文章评论插件"><a href="#添加文章评论插件" class="headerlink" title="添加文章评论插件"></a>添加文章评论插件</h3><p>主题自带<code>gittalk</code>,<code>gitment</code>,<code>valine</code>等评论插件，只需要去相应的官网注册，然后将相应的配置填入到主题的<code>_config.yml</code>中相应位置即可。</p><p>注：<code>gitalk</code>评论模块对文字表格有影响，并且经常加载不出来。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="配置CDN"><a href="#配置CDN" class="headerlink" title="配置CDN"></a>配置CDN</h3><p>cdn加速，只需要将主题文件夹下的<code>_config.yml</code>最后遗一行配置即可。后面填<code>https://cdn.jsdelivr.net/gh/</code>加上你的github账户名和你的博客地址，例如我的：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">jsDelivr</span><span class="token punctuation">:</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/axh2018/axh2018.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h3><p>安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录配置文件 <code>_config.yml</code> 末尾加入以下配置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span><span class="token key atrule">neat_enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">neat_html</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.md'</span><span class="token key atrule">neat_css</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.css'</span><span class="token key atrule">neat_js</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">mangle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">output</span><span class="token punctuation">:</span>  <span class="token key atrule">compress</span><span class="token punctuation">:</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'**/*.min.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/**/instantpage.js'</span>    <span class="token punctuation">-</span> <span class="token string">'**/matery.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建404页面"><a href="#新建404页面" class="headerlink" title="新建404页面"></a>新建404页面</h3><p>主题并没有404页面，所以我们来添加一个，<code>source</code>目录下新建一个<code>404.md</code>，内容：</p><pre class="line-numbers language-markdown"><code class="language-markdown">title: 404date: 2020-2-22 19:20:00type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面 :("<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着在/matery/layout/新建一个404.ejs文件，内容：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bg-cover pd-header about-cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col s10 offset-s1 m8 offset-m2 l8 offset-l2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        404                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description center-align<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;%= page.description %>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 每天切换 banner 图. </span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章生成永久链接"><a href="#文章生成永久链接" class="headerlink" title="文章生成永久链接"></a>文章生成永久链接</h3><p>主题默认的文章链接配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">premalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>day/<span class="token punctuation">:</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种生成的链接地址很长，我们可以修改文章生成链接的格式。</p><p>首先再根目录下执行下面的命令：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在博客文件夹根目录下<code>_config.yml</code>添加如下配置</p><pre class="line-numbers language-yml"><code class="language-yml">abbrlink:    alg: crc16   #算法： crc16(default) and crc32    rep: hex     #进制： dec(default) and hex: dec                 #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再将站点配置文件的<code>permalink</code>的值修改为：</p><pre class="line-numbers language-yml"><code class="language-yml">permalink: posts/:abbrlink.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成文章的链接格式格式如下（官方样例）:</p><pre class="line-numbers language-yml"><code class="language-yml">crc16 & hexhttps://post.zz173.com/posts/66c8.htmlcrc16 & dechttps://post.zz173.com/posts/65535.htmlcrc32 & hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 & dechttps://post.zz173.com/posts/1690090958.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成完后，原md文件的Front-matter 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了<code>Front-matter</code> 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p><h3 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h3><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p><p>本主题图片进行懒加载，这样做效果就是 <code>html</code>、<code>css</code>、<code>js</code> 加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p><p>先安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后到博客根目录下<code>_config.yml</code>中加入以下字段：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 懒加载</span><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否开启图片懒加载</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /images/loading.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中gif图的位置应该放在<code>source/images/</code>下。</p><h3 id="设置文字模板"><a href="#设置文字模板" class="headerlink" title="设置文字模板"></a>设置文字模板</h3><p><code>Hexo</code>的页面是包括一个<code>md</code>文件和<code>ejs</code>文件结合而成的，<code>md</code>文件中的内容是页面配置，基本信息，和显示的内容。而<code>ejs</code>文件就是<code>js</code>逻辑代码了。</p><p>我们在<code>scaffolds/post.md</code>中设置文章的默认模板，这样以后创建文章的时候，这些信息就默认添加上了，不同文章你也可以修改这些信息。上面Front-matter已经介绍过了。</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: {{ title }}date: {{ date }}author: 布莱恩特科比酱img:top:cover:coverImg:password:toc:mathjax:summary:categories:<span class="token title important">tags:<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片添加水印"><a href="#图片添加水印" class="headerlink" title="图片添加水印"></a>图片添加水印</h3><p>为了防止别人抄袭你文章，直接用你文字的图片，可以把所有的图片都加上水印。在博客根目录下新建一个<code>watermark.py</code>，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  u<span class="token string">'@hiyoung'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行<code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行<code>python3 watermark.py all</code>。</p><p>这个代码的逻辑就是从文章目录下拿到图片，添加水印。这个前提是要文章的图片放在source/_posts/下，所以如果在文章中直接引用了其他地方的图片链接，那么这个脚本不会去给那个图片加水印了。</p><h3 id="动态标签栏"><a href="#动态标签栏" class="headerlink" title="动态标签栏"></a>动态标签栏</h3><p>在<code>theme/matery/layout/layout.ejs</code>下添加如下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span> <span class="token string">"text/javascript"</span> <span class="token operator">></span>    <span class="token keyword">var</span> OriginTitile<span class="token operator">=</span>document<span class="token punctuation">.</span>title<span class="token punctuation">,</span>st<span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>hidden<span class="token operator">?</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"ヽ(●-`Д´-)ノ你要玩捉迷藏嘛"</span><span class="token punctuation">,</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>title<span class="token operator">=</span><span class="token string">"(Ő∀Ő3)ノ被发现啦！"</span><span class="token punctuation">,</span>st<span class="token operator">=</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span>title<span class="token operator">=</span>OriginTitile<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改导航栏颜色以及透明效果"><a href="#修改导航栏颜色以及透明效果" class="headerlink" title="修改导航栏颜色以及透明效果"></a>修改导航栏颜色以及透明效果</h3><p><code>themes/matery/source/css/matery.css</code>文件中，有一个<code>.bg-color</code>属性，修改其属性值即可，代码如下：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     //修改成自己喜欢的颜色值    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span>      //透明效果 值范围 <span class="token number">0</span>~<span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外链跳转插件"><a href="#外链跳转插件" class="headerlink" title="外链跳转插件"></a>外链跳转插件</h3><p>跳转外链相关插件。自动为所有<code>html</code>文件中外链的<code>a</code>标签生成对应的属性。 比如 设置 <code>target='_blank'</code>, <code>rel='external nofollow noopener noreferrer'</code> 告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下<code>go.html</code>;</p><p>安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-external-link --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置插件：</p><p>在<code>Hexo</code>根目录的<code>_config.yml</code>文件中添加如下配置。</p><pre class="line-numbers language-yml"><code class="language-yml">hexo_external_link:  enable: true  enable_base64_encode: true  url_param_name: 'u'  html_file_name: 'go.html'  target_blank: true  link_rel: 'external nofollow noopener noreferrer'  domain: 'your_domain' # 如果开启了防盗链  safety_chain: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>enable</strong> - 是否开启<code>hexo_external_link</code>插件 - 默认 false</li><li><strong>enable_base64_encode</strong> - 是否对跳转<code>url</code>使用<code>base64编码</code> - 默认 fasle</li><li><strong>url_param_name</strong> - url参数名,在跳转到外链传递给<code>html_file_name</code>的参数名 - 默认 ‘u’</li><li><strong>html_file_name</strong> - 跳转到外链的页面文件路径 - 默认 ‘go.html’</li><li><strong>target_blank</strong> - 是否为外链的<code>a</code>标签添加<code>target='_blank'</code> - 默认 true</li><li><strong>link_rel</strong> - 设置外链的<code>a</code>标签的rel属性 - 默认 ‘external nofollow noopener noreferrer’</li><li><strong>domain</strong> - 如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host</li><li><strong>safety_chain</strong> - go.html 为了防止外链盗用 对域名进行的判断 - 默认 false</li></ul><h3 id="添加鼠标点击烟花爆炸效果"><a href="#添加鼠标点击烟花爆炸效果" class="headerlink" title="添加鼠标点击烟花爆炸效果"></a>添加鼠标点击烟花爆炸效果</h3><p><code>themes/matery/source/js</code>目录下新建<code>fireworks.js</code>文件，打开<a href="https://github.com/axh2018/script/blob/master/fireworks.js" target="_blank" rel="noopener"></a>将内容复制粘贴到<code>fireworks.js</code>。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>canvas <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fireworks"</span> style<span class="token operator">=</span><span class="token string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"/js/fireworks.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="添加樱花飘落效果"><a href="#添加樱花飘落效果" class="headerlink" title="添加樱花飘落效果"></a>添加樱花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>sakura.js</code>文件，打开<a href="https://github.com/axh2018/script/blob/master/sakura.js" target="_blank" rel="noopener"></a><br>将内容复制粘贴到<code>sakura.js</code>。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//只在桌面版网页启用特效</span><span class="token keyword">var</span> windowWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>windowWidth <span class="token operator">></span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;script type="text/javascript" src="/js/sakura.js">&lt;\/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加鼠标彩虹星星掉落跟随效果"><a href="#添加鼠标彩虹星星掉落跟随效果" class="headerlink" title="添加鼠标彩虹星星掉落跟随效果"></a>添加鼠标彩虹星星掉落跟随效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开<a href="https://github.com/axh2018/script/blob/master/cursor.js" target="_blank" rel="noopener"></a><br>将内容复制粘贴到<code>cursor.js</code>。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加雪花飘落效果"><a href="#添加雪花飘落效果" class="headerlink" title="添加雪花飘落效果"></a>添加雪花飘落效果</h3><p>在<code>themes/matery/source/js</code>目录下新建<code>cursor.js</code>文件，打开<a href="https://github.com/axh2018/script/blob/master/snow.js" target="_blank" rel="noopener">https://github.com/axh2018/script/blob/master/snow.js</a><br>将内容复制粘贴到<code>cursor.js</code>。</p><p>然后在<code>themes/matery/layout/layout.ejs</code>文件内添加以下内容：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/js/snow.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加鼠标点击文字特效"><a href="#添加鼠标点击文字特效" class="headerlink" title="添加鼠标点击文字特效"></a>添加鼠标点击文字特效</h3><p>主题文件下的<code>/source/js/</code>下新建<code>click_show_text.js</code>，以下代码添到<code>js</code>中：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"富强"</span><span class="token punctuation">,</span> <span class="token string">"民主"</span><span class="token punctuation">,</span> <span class="token string">"文明"</span><span class="token punctuation">,</span> <span class="token string">"和谐"</span><span class="token punctuation">,</span> <span class="token string">"自由"</span><span class="token punctuation">,</span> <span class="token string">"平等"</span><span class="token punctuation">,</span> <span class="token string">"公正"</span><span class="token punctuation">,</span> <span class="token string">"法治"</span><span class="token punctuation">,</span> <span class="token string">"爱国"</span><span class="token punctuation">,</span> <span class="token string">"敬业"</span><span class="token punctuation">,</span> <span class="token string">"诚信"</span><span class="token punctuation">,</span> <span class="token string">"友善"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> $i <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span/>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>a_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_idx <span class="token operator">=</span> <span class="token punctuation">(</span>a_idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">var</span> x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span>            y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"z-index"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string">"left"</span><span class="token punctuation">:</span> x<span class="token punctuation">,</span>            <span class="token string">"position"</span><span class="token punctuation">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>            <span class="token string">"font-weight"</span><span class="token punctuation">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>            <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#FF0000"</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$i<span class="token punctuation">)</span><span class="token punctuation">;</span>        $i<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                <span class="token string">"top"</span><span class="token punctuation">:</span> y <span class="token operator">-</span> <span class="token number">180</span><span class="token punctuation">,</span>                <span class="token string">"opacity"</span><span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">3000</span><span class="token punctuation">,</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token string">'delay()'</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".buryit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加建站时间"><a href="#增加建站时间" class="headerlink" title="增加建站时间"></a>增加建站时间</h3><p>只需将主题的<code>_config.yml</code>中的<code>time</code>设置为<code>true</code>即可：</p><pre class="line-numbers language-yml"><code class="language-yml"># Website start time.# 站点运行开始时间.time:  enable: trues  year: 2019 # 年份  month: 11 # 月份  date: 30 # 日期  hour: 17 # 小时  minute: 30 # 分钟  second: 00 # 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加博客天气插件"><a href="#添加博客天气插件" class="headerlink" title="添加博客天气插件"></a>添加博客天气插件</h3><p>去中国天气网<a></a><a href="https://cj.weather.com.cn/plugin/pc" target="_blank" rel="noopener">https://cj.weather.com.cn/plugin/pc</a>可以获取一段定制的天气代码，将这段代码添加到</p><p> <code>/themes/matery/layout/layout.ejs</code>即可，例如：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> my_weather天气 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        WIDGET <span class="token operator">=</span> <span class="token punctuation">{</span>FID<span class="token punctuation">:</span> <span class="token string">'QIqG0hDUBi'</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"https://apip.weatherdt.com/float/static/js/r.js?v=1111"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加live2d模型"><a href="#添加live2d模型" class="headerlink" title="添加live2d模型"></a>添加live2d模型</h3><p>安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装模型：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local    <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/    <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/    <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/    <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">model</span><span class="token punctuation">:</span>        <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku    <span class="token key atrule">display</span><span class="token punctuation">:</span>        <span class="token key atrule">position</span><span class="token punctuation">:</span> right        <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>        <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">300</span>    <span class="token key atrule">mobile</span><span class="token punctuation">:</span>        <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">react</span><span class="token punctuation">:</span>        <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中模型你可以更改，想了解更多，请移步官网<a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md</a></p><h3 id="背景动态彩带"><a href="#背景动态彩带" class="headerlink" title="背景动态彩带"></a>背景动态彩带</h3><p>只需将<code>matery/_config.yml</code>中<code>canvas_nest</code>设置为<code>true</code>即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 背景静止彩带.</span><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">size</span><span class="token punctuation">:</span> <span class="token number">150 </span><span class="token comment" spellcheck="true"># 彩带大小, 默认: 90.</span>  <span class="token key atrule">alpha</span><span class="token punctuation">:</span> <span class="token number">0.6 </span><span class="token comment" spellcheck="true"># 彩带透明度 (0 ~ 1), 默认: 0.6.</span>  <span class="token key atrule">zIndex</span><span class="token punctuation">:</span> <span class="token number">-1 </span><span class="token comment" spellcheck="true"># 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1.</span>  <span class="token key atrule">clickChange</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 设置是否每次点击都更换彩带.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="背景动态线条"><a href="#背景动态线条" class="headerlink" title="背景动态线条"></a>背景动态线条</h3><p>只需将<code>matery/_config.yml</code>中<code>ribbon_dynamic</code>设置为<code>true</code>即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">ribbon_dynamic</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：加载这些样式非常耗资源。</p><h3 id="添加反爬虫协议"><a href="#添加反爬虫协议" class="headerlink" title="添加反爬虫协议"></a>添加反爬虫协议</h3><p>robots是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。</p><p>我们在hexo 根目录下的 <code>public</code> 目录下新建一个<code>robots.txt</code>文件，内容如下：</p><pre class="line-numbers language-txt"><code class="language-txt">User-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/DisAllow: /about/Disallow: /friends/Disallow: /contact/Sitemap: https://axh2018.cn/sitemap.xmlSitemap: https://axh2018.cn/baidu_sitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可自定义哪些内容可以被爬取，哪些内容不能。</p><p>参考</p><ul><li><a href="https://chinatianyunfeng.github.io/posts/63466.html#toc-heading-8" target="_blank" rel="noopener">https://chinatianyunfeng.github.io/posts/63466.html#toc-heading-8</a></li><li><a href="https://yafine-blog.cn/posts/4ab2.html#toc-heading-55" target="_blank" rel="noopener">https://yafine-blog.cn/posts/4ab2.html#toc-heading-55</a></li><li><a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-37" target="_blank" rel="noopener">https://sunhwee.com/posts/6e8839eb.html#toc-heading-37</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker运行酷Q</title>
      <link href="/posts/a01a.html"/>
      <url>/posts/a01a.html</url>
      
        <content type="html"><![CDATA[<p>CentOS运行酷Q需要<a href=" https://www.docker.com/ " target="_blank" rel="noopener">docker</a>的加持，什么是docker?</p><p> Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 </p><ol><li>卸载Docker旧版本(如果存在的情况下)</li></ol><pre class="line-numbers language-shell"><code class="language-shell">yum -y remove docker docker-engine docker-common docker-selinux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装依赖软件包</li></ol><pre class="line-numbers language-shell"><code class="language-shell">sudo yum install -y yum-utils device-mapper-persistent-data  lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装Docker</li></ol><pre class="line-numbers language-shell"><code class="language-shell">sudo yum updatesudo yum install docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>启动Docker</li></ol><pre class="line-numbers language-shell"><code class="language-shell">sudo systemctl start dockersudo enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>验证是否安装成功</li></ol><pre class="line-numbers language-shell"><code class="language-shell">docker --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>阿里云镜像加速&lt;<strong>注意,这点非常重要,不用加速,你可能pull一个coolq的镜像需要几个小时</strong>&gt;</li></ol><pre class="line-numbers language-shell"><code class="language-shell">sudo mkdir -p /etc/dockervim /etc/docker/daemon.jsonsudo tee /etc/docker/daemon.json <<-'EOF'{  "registry-mirrors": ["https://dttr1kms.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>卸载docker</em></p><pre class="line-numbers language-shell"><code class="language-shell">systemctl stop dockeryum -y remove docker-cerm -rf /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么接下来我们就来在CentOS的服务器上运行酷Q</p><ul><li>开启Docker<pre class="line-numbers language-shell"><code class="language-shell">systemctl start docker <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol><li>拉取coolq镜像<pre class="line-numbers language-shell"><code class="language-shell">docker pull coolq/wine-coolq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>然后创建一个存放数据的文件夹<pre class="line-numbers language-shell"><code class="language-shell">mkdir /root/coolq-data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>运行酷Q<pre class="line-numbers language-shell"><code class="language-shell">docker run --name=coolq -d -p 8080:9000 -v /root/coolq-data:/home/user/coolq -e VNC_PASSWD=123456 -e COOLQ_ACCOUNT=123456 coolq/wine-coolq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>然后打开浏览器输入你的  IP:8080   就可以访问VNC了，密码是上面设置的123456</li></ol><p><strong>注意，此时你可能通过浏览器输入你的IP加端口不能访问到VNC界面，那是因为还没开放相应，记得去服务器后台设置安全组</strong></p><p>更多有趣的酷Q插件，请访问<a href="https://cqp.cc/b/app" target="_blank" rel="noopener">cpp.cc/b/cpp</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装</title>
      <link href="/posts/d698.html"/>
      <url>/posts/d698.html</url>
      
        <content type="html"><![CDATA[<h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><blockquote><p>这里的教程适用于UEFI+BIOS启动</p></blockquote><blockquote><p>装的过程需要联网</p></blockquote><h3 id="1-连接网络"><a href="#1-连接网络" class="headerlink" title="1. 连接网络"></a>1. 连接网络</h3><p>//当然，你不想这么麻烦，可以直接手机USB共享网络</p><h3 id="扫描当前互联网设备"><a href="#扫描当前互联网设备" class="headerlink" title="扫描当前互联网设备"></a>扫描当前互联网设备</h3><pre class="line-numbers language-bash"><code class="language-bash">   ip <span class="token function">link</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <b>1.2 启用设备</b></p><pre class="line-numbers language-bash"><code class="language-bash">$ ip <span class="token function">link</span> <span class="token keyword">set</span> 设备名 up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <b>1.3 扫描WiFi</b></p><pre class="line-numbers language-bash"><code class="language-bash">$ iwlist 设备名 scan <span class="token operator">|</span> <span class="token function">grep</span> ESSID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <b>1.4 连接网络</b></p><pre class="line-numbers language-bash"><code class="language-bash">$ wpa_passphrase SSID <span class="token function">passwd</span> <span class="token operator">></span> internet.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <b>分配IP</b></p><pre class="line-numbers language-bash"><code class="language-bash">$ systemctl  start dhcdcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <b>1.6 测试连上网络</b></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ping</span> www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>能ping通即可</strong></p><h3 id="2-设置时区"><a href="#2-设置时区" class="headerlink" title="2. 设置时区"></a>2. 设置时区</h3><pre class="line-numbers language-bash"><code class="language-bash"> timedatectl set-ntp <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>3.分区</h3>&gt; 我这里装到sda上,且sda 大小为64g,要查看你的分区表，可以`$ fdisk -l` <p>​    <b>3.1 编辑磁盘</b></p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">fdisk</span> /dev/sda   <span class="token comment" spellcheck="true">#给sda分区</span> g   <span class="token comment" spellcheck="true"># 清除原有分区并创建一个GPT分区表</span> n   <span class="token comment" spellcheck="true"># 创建一个新的分区/dev/sda1 -- 引导分区</span>     <span class="token comment" spellcheck="true"># 接下来选择分区编号、起始位置、终止位置（分区大小，可用“+300M”的形式）</span> n   <span class="token comment" spellcheck="true"># 创建一个swap分区/dev/sda3 -- SWAP分区（虚拟内存分区,分区不需要太大）</span>      <span class="token comment" spellcheck="true">#我设置为1G</span> n   <span class="token comment" spellcheck="true"># 创建一个新的分区/dev/sda2 -- 主分区</span>     <span class="token comment" spellcheck="true"># 大小我设置为磁盘的所有剩余空间</span> p   <span class="token comment" spellcheck="true"># 查看分区结果</span> w   <span class="token comment" spellcheck="true"># 写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <b>3.2 格式化每个分区</b></p><pre class="line-numbers language-bash"><code class="language-bash">$ mkfs.fat  -F32   /dev/sda1$ mkfs.ext4        /dev/sda2$ mkswap           /dev/sda3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    <b>3.3 打开swap</b></p><pre class="line-numbers language-bash"><code class="language-bash">$ swapon           /dev/sda3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>4.换源</h3>* <b>编辑 /etc/pacman.d/mirrorlist</b>* <b>将第一个China下面的Server一行移到最顶上</b><h3>5.安装ArchLinux</h3>  <b>5.1 挂载磁盘</b><pre class="line-numbers language-shell"><code class="language-shell">mkdir         /mnt/boot                  #创建启动分区mount      /dev/sda1   /mnt/boot       #挂载启动分区mount      /dev/sda2    /mnt             #挂载主分区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  <b>5.2 开始 安装</b></p><pre class="line-numbers language-shell"><code class="language-shell">pacstrap    /mnt base linux linux-firmware   # 安装Linux基础的软件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​     <b>5.3生成fstab文件</b></p><pre class="line-numbers language-bash"><code class="language-bash">genfstab -U   /mnt   <span class="token operator">>></span>   /mnt/etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>6.进入安装好的系统,设置一些本地化操作</h3>​    <b>6.1 进入系统</b> <pre class="line-numbers language-bash"><code class="language-bash">arch-chroot     /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   <b>6.2 设置时区</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ln</span> -sf     /usr/share/zoneinfo/Asia/Shanghai     /etc/localtime <span class="token comment" spellcheck="true">#创建软连接</span>hwclock --systohc                                        <span class="token comment" spellcheck="true">#同步时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   <b>6.3设置语言</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> LANG<span class="token operator">=</span>en_US.UTF-8    <span class="token operator">></span>    /etc/locale.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <b>6.4 设置主机名</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span>   arch    <span class="token operator">></span>    /etc/hostname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <b>6.5编辑hosts</b></p><pre class="line-numbers language-bash"><code class="language-bash">vim            /etc/hosts       <span class="token comment" spellcheck="true">#其中加入以下几行 </span>127.0.0.1     localhost::1          localhost127.0.1.1      arch.localdomain   arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>   <b>6.6设置root密码</b></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3>7.设置引导</h3>```bashpacman -S     grub    efibootmgr  intel-ucode  os-prober mkdir     /mnt/boot/grubgrub-mkconfig    &gt;  /boot/grub/grub.cfggrub-install    --target=x86_64-efi    --efi-directory=/boot```<h3>8.安装一些基本工具</h3>```bashpacman -S vim nano vi dialog wpa_supplicant networkmanager dhcpcd net-tools  zsh```<h3>9.设置自启dhcpcd 服务</h3>```bashsystemctl enable dhcpcd```<h3>10.重启</h3>```bashexit                            # 退出arch-chrootkillall wpa_supplicant dhcpcd   # 终止掉网络相关的进程reboot                          # 重启，关机后就可以拔掉USB```<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Arch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法摘要</title>
      <link href="/posts/9c48.html"/>
      <url>/posts/9c48.html</url>
      
        <content type="html"><![CDATA[<h2 align="center">Markdown入门指南</h2>博客搭建教程可以参考<a href="https://yafine-blog.cn/posts/4ab2.html" target="_blank" rel="noopener">过客~励心的博客</a>，感谢这位大佬，我的博客就是在这篇文章的指导下搭好的。大佬技术好，人也很好，愿意帮助萌新，开始搭博客只能还特意去学了下Markdown语法（偷看，十分钟就能学会），因为hexo+GitHub部署博客写文章用的是Markdown格式。另外Markdown是兼容HTML的，这里介绍一下Markdown常用的几种语法。(写Markdown推荐Typora)<ul><li><p>标题<br><br>  一个#代表一级标题，两个#代表二级标题，最高六级，#和标题之间一个空格</p><blockquote><p># 一级标题<br><br># 二级标题<br><br># 三级标题<br></p></blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3></li><li><p>字体加粗<br><br>  加粗的文字左右两边分别用两个* 包起来<br></p><blockquote><p>**我是加粗的文字**<br></p></blockquote><p>  <strong>我是加粗的文字</strong></p></li><li><p>字体倾斜<br><br>  斜的文字左右分别用一个* 号包起来<br></p><blockquote><p>*我是倾斜的文字*<br></p></blockquote><p>  <em>我是倾斜的文字</em></p></li><li><p>文字斜体加粗<br><br>  和加粗的文字左右分别用三个* 号包起来<br></p><blockquote><p>***我是既倾斜又加粗的文字***<br></p></blockquote><p>  <strong><em>我是既倾斜又加粗的文字</em></strong></p></li><li><p>删除线<br><br>  删除线的文字左右分别用两个~ 号包起来<br></p><blockquote><p>~~我是加删除线的文字~~</p></blockquote><p>  <del>我是加删除线的文字</del></p></li><li><p>引用<br><br>  用的文字前加一个&gt;，引用可以嵌套，如两个&gt;&gt;<br><br>  &gt;我是引用的文字</p><blockquote><p>我是引用的文字</p></blockquote></li><li><p>分割线<br><br>  三个的-或者*</p><hr></li><li><p>图片<br></p><blockquote><p>格式：<br>![图片](<a href="https://raw.githubusercontent.com/8546KB/My_picture/master/20191207192815.png" target="_blank" rel="noopener">https://raw.githubusercontent.com/8546KB/My_picture/master/20191207192815.png</a>)</p></blockquote><p>  <img src="https://raw.githubusercontent.com/8546KB/My_picture/master/20191207192815.png" alt="图片">    </p></li><li><p>超链接<br></p><blockquote><p>格式：<br>[百度](<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a>)<br></p></blockquote><p>  <a href="https://www.baidu.com/" target="_blank" rel="noopener" title="百度">百度</a></p></li><li><p>无序列表<br><br>  无序列表用 - + * 任何一种都可以</p><blockquote><p>+列表内容<br>- 列表内容<br>* 列表内容</p></blockquote><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul></li><li><p>有序列表<br>  数字加点</p><blockquote><p>1.列表内容<br>2.列表内容<br>3.列表内容 </p></blockquote><p>  1.列表内容<br>  2.列表内容<br>  3.列表内容  </p></li><li><p>单行代码<br><br>  代码之间分别用一个反引号包起来</p><blockquote><p>`System.out.print(“hello world);'<br></p></blockquote><p>  <code>Sysem.out.print("hello world");</code></p></li><li><p>多行代码<br><br>  代码之间分别用三个反引号包起来，且两边的反引号单独占一行,加上语言<br></p><blockquote><p>```c<br>#include&lt;stdio.h&gt;<br>int main()<br>{<br>printf(“hello world);<br>return 0;<br>}<br>```</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>​    <span class="token function">printf</span><span class="token punctuation">(</span>"hello world<span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>表格</p><blockquote><p>格式：<br>姓名|技能|排行<br>–|:–:|–:<br>刘备|哭|大哥<br>关羽|打|二哥<br>张飞|骂|三弟</p></blockquote></li></ul><table><thead><tr><th>姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td>刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td>关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td>张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
